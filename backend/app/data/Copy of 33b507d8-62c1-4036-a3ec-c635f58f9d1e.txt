Speaker A:
Okay. It said that you started, so got a little notification here.
Speaker B:
Great. Yeah. So the recording is going. And maybe just to pick up where we were. Just understand a little bit more about why testing is secondary in your workflow.
Speaker A:
Why? It's just mainly, I guess it's because I'm essentially adapting what is. I'm part of the team where I work, adapting an existing technology that's just a standard desktop app, native application to something you can pull up on a web browser. This is actually changing fairly quickly and this is an interesting process, but it was at least originally conceived as an afterthought. It was never, for whatever reason, it was only expected to be a very, very limited sort of adaptation of sort of, you know, a set number of features. And the. Instead of. It's funny, the. This before I got here, it was begun before I got there and the people who were working on it were. I mean, I. From what I understand, they were probably not nearly as experienced in things like JavaScript and the like as I am, just because they're very experienced in what they, you know, see, you know, were primarily working like C and stuff like that. But I mean, in other words, it wasn't their primary sort of thing either. They were able to do it. So we're. They actually, whoever people that began it created sort of an event system, a sort of little event system from scratch, which. And a bunch of widget, you can't really call them classes, but it's prototype objects, prototypes, whatever you call them in JavaScript from scratch. And it's actually. It's pretty impressive, to be honest, especially for people who don't specialize in that sort of thing. But in other words, it's at. It's the whole framework right now that we're using is ad hoc. Very. In many ways. Yeah. So did that make any sense?
Speaker B:
Yeah, I think it did. I might repeat back to you what I understood, just to make sure that I am tracking correctly. There's a desktop app that has existed and right now you're working to recreate it as a web application.
Speaker A:
Yeah, not in its entire. We're not recreating in its entirety. We're adding. We're incrementally adding more features to the web as customers request them. Like I said, we originally thought it would just be a few set features, but, well, they really liked us putting things on the web and so we're doing. Adding more and more of them and is expanding rapidly. We're actually. We've probably outgrown the fruit, sort of ad hoc Framework that was constructed already and we're accumulating a lot of technical debt right now. We're probably going to actually redo parts of that for that reason, but.
Speaker B:
Okay. Well, one of the things that we want to do today is map out what your typical if there is such thing, development process looks like and where in that process, if any testing comes into play. And I know you said. But there's actually an activity I'd like to do with you attempt to make that happen. So I'm putting a link in chat. If you could click on that and then it will get a session going, which will help us visualize what that process looks like. And when you have that, when you click into it, I will. I think I actually accidentally sent you an email.
Speaker A:
You sent me a link in the chat, but it doesn't. All it did was just open up a chat window and I can see the link pasted there. It doesn't seem to, in fact, seems broken. I can copy and paste it and put it on my.
Speaker B:
Yeah, why don't try that.
Speaker A:
Okay. Yeah, it looks like it's insightfully. Yep. Okay. Yeah.
Speaker B:
So I'm going to share my screen so John can follow along.
Speaker A:
Okay. Yeah. I realize I kind of rambled on a bit there before about. Yeah. So I can. If you ever need clarification, just ask.
Speaker B:
Great, thank you. So I'm going to load up this grid to your. To this platform and you'll see the horizontal line. And one of the things that we'd love for you to do is just. I mean, you just told us what you're working on, but if you could map out some of the major steps that you go through or the major events in your workflow, and you can do that by adding an event. They'll populate in the middle and you can drag them left or right, just depending where they happen chronologically in your workflow. And for now, the vertical axis doesn't matter. It's just the horizontal axis.
Speaker A:
Okay. All right. I can. Oh, okay, there it goes. The. I can. Oh, I see. Wait, can I expand on the. Is it just like a. Just a title or do it. Am I supposed to like somehow click in there and put a description in?
Speaker B:
Actually, if you could talk to us as you're building these out and help us understand a little bit more of what that step is. That's great. And you can type it in there if you want to. But since we've got the audio recording, we'll know what the context is. We go back and take a Look at this.
Speaker A:
Fair enough. Okay. Actually, let me just sort of add a little bit more just so I can get a handle on what I'm going to say. That makes sense. Make sure I'm doing it right. In other words, I want to.
Speaker B:
Well, the good news is there's no wrong way to do it and there's no wrong answers in the session today.
Speaker A:
No. In other words, I don't accidentally describe my own workflow incorrectly. That makes sense. All right. Yeah. Okay. Well, I can start describing. Okay. So essentially just the very first thing is we get. Generally get a request to add a specific feature or sort of set of features on and add them to the web GUI we have. Now the processing is still, you know, via the native application, via the process, the Pro. The same processing is done via the native application and it starts a server and sends it. These are just sort of clients that are. Would be receiving the same data as the native application does if you were to have both open at once. So let me think of. We're specifically doing a signal process where it's a signal processing application where, you know, you can see various Graphs, charts, transformations, etc. Of signals coming through. So those are them. It gets very technical. It's hard to describe. But you, I'm sure, visualize roughly what I'm talking about. Essentially what it looks like is just a. Think of like just a set of graphs you like desmos almost, you know, math, like a. You know what I'm talking about. So like a desmos, you can go on and just plot graphs of mathematical functions or something. So. And you can do all sorts of random. Only this is dealing with existing signals anyway. So we get a feature request at a certain type of graph or transformation or something. Some sort of. Usually it's some sort of view or some way to manipulate the signals that coming through somehow. And the very first thing we do, and generally we're working independently on sort of discrete parts of it that we can combine together later. So there isn't. There's some collaborative planning at the beginning, but pretty quickly I'm sitting there planning on my own about what I'm specifically going to do on for what I'm specifically going to be going to implement. And I say architecture, but it's not necessarily a truly. It's not necessarily a formal process. Sometimes it's me, if I haven't dealt with a feature before, I'm learning how to use it, what it is because there's so many features. It's. And I'm still fairly new it's sometimes I just don't know what. I've never actually used the specific thing that we're add. So I get a feel for that. Then I. Yeah, mostly just plan how at a high level, how can I, you know how, you know, how can I in an abstract sense generally get the data, send it across to the client, display it on the client. How would it look, how would it. If it. To the extent that I have to actually decide on this myself, it wasn't specifically how can I make it look good, intuitive, all that and so and it can be pretty complex. It can be. It can also be. Depending on what it is. It can be pretty simple, pretty cut and dry. Sometimes there isn't all that much. Sometimes architect saying architectural planning is really a bit of an overstatement. It's really not. It depends on what I'm doing really. After I'm done with that I've already decided what I'm going to do first and ok, let's say server side. I can just divide it roughly into server side or how would I put this? I'll just say server side work. Why not Essentially, do you know what PB messages are? Proto is Google Proto Buff.
Speaker B:
I will say no and let you know that neither John or I are developers.
Speaker A:
So. Okay, fair enough.
Speaker B:
Probably don't know much about your work world.
Speaker A:
Okay. Yeah, no, I should have asked that in the beginning because I can see why. Okay, yeah, no, I'm. I didn't know that some. I assumed you guys were for some reason, but there's no reason you should be. So forgive me for that. So.
Speaker B:
But you can explain technical concepts like you can, you can. You don't need to dumb it down for us because we're interested in how you talk about it and some of the technologies that you use and we don't necessarily need to know what those are, but would like. We personally don't need to know what they are, but we would love to learn about them in this interview.
Speaker A:
Fair enough. Partially because this application wasn't originally designed to be displayed in a web browser. This is pretty unusual but we're actually the language we're using a program in the server side is C. We're starting a server in RAW C using pure C and we start the client is using JavaScript and we use something called Google Proto Buff messages. They're developed by Google obviously, but it's just basically an interface. It's almost like JSON or something, only I guess more thorough work. I don't want to say better but it's yeah, more, it's more, it's richer, I guess it's built for more for bigger things than JSON is. We use that to communicate back and forth. And you know, there's. You can, on the server side or client side, decode and do with those messages what you will. So the server side work mainly consists of essentially getting the processing to, or getting the streams of data that are already flowing in the. You should call it the native application and a. Getting it sort of integrating it with the server so that it can basically integrating that. How do I put this? Integrating. So it can actually be, you know, be used in a web context. Can actually be used. The data can be translated, sent as messages somehow back and forth. Because these things aren't built in to be sent over, you know, a web interface by default. Essentially that's the first thing we do is. Yeah, this is mostly in the server side just. This is mainly in the server side just adding, mainly modifying existing code so that whatever data is needed for that specific feature is able to first flow from where it's actually generated in the native application. Okay. And that can be. That's easily half of the work that I do for a given feature. That takes. It's generally a good. I'd say it's some. Often a lot more than half of the work is that by comparison, once you've got that going, sending, getting messages successfully sent from the server to the client, it's generally not incredibly difficult to handle it on the client side. The communication from the client to the server, back from the client to the server, getting the server to handle that properly, that can be just a bit. That can be difficult too. It's heavily. It's a highly concurrent application. The risk of threat, you know, deadlock, thread interleaving and the like is high. And the code bait, the specific part of the code base I'm dealing with is actually one of the largest and most complicated in all of the code that we use. We really need to address that at some point. It's becoming very bloated and say I say communication or server. Yeah, communication. Yeah. So as you can see, that's next. And I actually already mentioned that before really putting it down, really after that's done, once all the data, underlying data is flowing properly, doesn't necessarily have to be. In other words, we're not displaying it yet. It's not actually being. You're not actually seeing it on the web browser, although it technically is flowing across. If you. With Firefox, you can go to the web developer, you can go to the web console, you can see that if you want, if you know the variable names and such. And then after all that's done, remember we've already. There's already a pretty more or less thorough plan of what it's going to look like. So you know what, in a general sense you're going to put, what the widgets and such you're going to add are going to look like, where they're going to be put. There's some wiggle room, there's some details to be. To still be fleshed out because sort of technical aspects of styling via CSS or something like that. So you know, an abstract sense how it's going to be laid out. But you don't. Or at this point we haven't really. Or I haven't really. I haven't, I guess actually tried to actually put that in the, you know, add that to the HTML or CSS we're using. So and once you get to that point, it could easily. You can easily learn that you need to make some modifications. Can you guys still hear me? I'm just making sure my microphone sometimes.
Speaker B:
Yeah, I can still hear you.
Speaker A:
Okay, good. Okay, just making sure. So rendering. I'm going to put. I can just call it client side work because it's this. Yeah, once, like I said, this is generally the. There's already some client side work. The bare minimum required to actually test and make sure that data is indeed flowing properly. And sometimes it's easier to visualize that. But. And this is where some of the. This is part of what you're interested in probably just, you know, the web console debugger, you know, for Firefox we. I use a good deal of those. You know, if you just stop. Anything you can find in the web developer tab, they're pretty. I've explored. I know a good deal about how to use those at that point. I've used them a lot because if I can't visualize it, if I haven't actually don't actually have the widget set up yet, I know by that point I know exactly where to look to find the very. Or the sort of the variables containing whatever it is I'm looking for. So I just type that in, you know, into the web conference. And can you see my screen right now?
Speaker B:
I'm looking at the timeline, so no.
Speaker A:
Okay. You can't see all of it. Okay, never mind. But all right, so. But you know what I'm talking about. I'd go to the web console and just the variables named foo. Let's just go with that. A classic right. And say crude sort of testing right there. You can. That's just. I mean that's just very, very basic. You know, obviously client side work, implementation, all of that. And that involves actually constructing new widgets using old ones, putting them, you know, putting new elements in HTML, styling them with css, hooking them up into the little event system we have. And then you know, you. By that point you can see the widgets, they're there, you can send things to them. They're receiving data correctly. Roughly after that towards the. This is tail end of the project. You know, when everything's roughly in place. That's when the. That's when a lot of the testing goes on. There's some testing throughout. Just making, you know, like I said, I can look just use a good deal of use of the web console. Not only that, the Inspector setting break points, you know, be easier if you'd see the. What I'm looking at right now.
Speaker B:
But you can share your screen.
Speaker A:
Okay. Yeah, that's good. Yeah. Because I feel like it's important if I do so. Okay, let's see. To be honest, I haven't used Google Meet in incredible amount. I'm trying to figure where. Oh. Oh, yeah. Oh man, that should have been. Yeah, I'll just shoot my entire screen. Why not? Okay. Yes. Wait. Oh, wait. Sure. Okay, that's okay. So you can. You should see yourselves right now when it starts working. When I switch over to the Insightfully tab. Do you see that?
Speaker B:
Yep.
Speaker A:
Okay, cool. All right. So. Well, this isn't really. Okay, I'll just start over to get here. I went to Web Developer and I can click on any number of things I can use like I said the web console to. Well, I wouldn't use that first. Depending on what I'm doing. I could just do some. Just type in some things here. Like I said var who equals Create a. Pretend. This is pretend that is some object we're using in the. Some widget of some sort, even though it's obviously not. And you know this would be attached generally this would be attached to the window actually in JavaScript there's the sort of the Windows, the browser. You can see attributes of that or something like that. So in any case I would. You actually wouldn't see that at first. I'd know that was there already. You've already rendered it in would go. Yeah, you can just see make sure a variable right there. You can go to the debugger once Again, this isn't quite a sample project in front of me that make things easier. But that can sort of. You can set. Ok, well normally. Ok, well, you know what file just. I'll go there. Why not? That's the code that is being used. Render what you see in front of you right now so early is part of it. So in any case I could, I don't know, maybe open. Yeah, maybe. Maybe. I'm suspecting there's some trouble actually opening the site or opening the Bret. Or actually making the connection. It's not. The client isn't registered. The client isn't actually doing the proper. Taking the proper steps needed. Listen, for attempts to connect from the server or messages from the server about the connection or something. I don't know. Or it's not taking the proper steps upon opening. Upon the connection opening. So I can go here. I could set a. Well, let's say I knew that or I suspected the problem started about right here. I could set a breakpoint there by clicking this. Then whenever the. Whenever this part of the code is actually being used hit we'd call it. But it really. Once this is called, it would stop here. You can check and see. You can set watch expressions which are just. If you want to know what a variable's value is in given context, you can basically, if you want to examine what exactly is going wrong here. What exactly is happening here in a lot of detail. What is happening right here in this very specific.
Speaker B:
Actually, I wanted to ask you a question as you've been showing us this and you. Is this what you are calling your client side work on your testing workflow?
Speaker A:
Yeah, this is stuff. This is part of the client side work. Yes, because. And yeah, I was being very general here. I mean this is. You actually divide that into several subcategories. But like I said, we. While I'm doing that, I'm generally doing small tests throughout just to make sure what I've done immediately before actually works. And probably anybody coding anything would do that. But I mean that is part of it.
Speaker B:
And when you say you're doing small tests throughout, what. How would you define. Describe what those tests are?
Speaker A:
Okay, so let's say, okay, you're looking to see if. I'm just trying to think it's best to describe it via an example of some sort. Okay, first of all, the test can take one of two forms. The first is me proactively checking to see if a certain. To see if something is as it should be. In other words, nothing has gone wrong yet. You don't notice any. You think of. Okay, if, if this is being sent to the server or something, then okay, let's. Let's say I have a text box somewhere, right? Or not a text box, a combo box. Sure, yeah. You have a set of choices you can pick from and you know that you use the. This is actually an example from what I was doing before or fairly recently. There's a sort of a preset. There are preset options that are not known in advance. You can't just program them directly on the client side. They have to be sent from the server. So you want to check and make sure that the correct. I mean you can visibly see when it's sent. If you have the combo box there, you can see. Okay, yeah, the correct elements are there. But you never know. Something could be going sort of in the background. Something could be going wrong and there could. That could be bug late. There could be a bug later resulting from that. So maybe I check and see that the elements array is I guess the correct number of. It's set to the correct size for. You know, let's say we're going to. Maybe some future elements are going to be sent when the user selects some option just dynamic. You know, the user selects some options that sent it. Some of them were previously hidden and you don't. Once again, you don't know them in advance. So you have to request that the server send them. But you have a fixed sized. For whatever reason, you have a fixed size array that you're using or you to store them. You essentially have to know the total number of options you're going to have in advance as well. Let's say you'd want to know that would have to be sent from the server too. You don't know that in advance. You check when it opens and it receives the necessary data. You want to know is the length of this array equal to n the. The total number of elements that will eventually be displayed. So ok, well, in that case I could literally just sort of start the application. I wouldn't even really need to use the debugger for this. I just. In general, I go to the application or I go to the console and I know what the variable name is. I check arrays or the. See foo dot R. Pretend that's in there. It's not dot length. All right, just type that in. There you go. You have it. Oh, you can see. Oh, it either it's correct or oh, it's not correct. It has too few elements. I mean the ones that you're displaying right this second are showing correctly, but once you send more, they'll. They just won't be added because they'll. There won't be enough room. So that's what I mean by I'm anticipating something that might be going wrong, in other words. The other thing is I see a visible bug somewhere, maybe. We're doing a lot of work with the Canvas API, believe it or not. Like I said, we're showing graphs and showing in real time waveforms and the like. So maybe you notice it's. I don't know, it seems like the we're showing is the dimensions are incorrect. It's way too far to the left a lot. Sometimes for some reason you're like, why is that okay? And that. That sort of thing can be very difficult. You can't just. It's very hard to pinpoint that. It's rare that you can just say, oh, I know what that is, and go fix it. So when something like that happens, it could very well be an error on the server side. You never know. That wouldn't be really be web testing though. That's just that it's not really. I'm not really working with web technologies there. But it also could be in the client side. Could be that the canvas is not being reset properly or something like that. Never know that's where. And since this is happening rapidly in real time, I'd set. I don't know what these are. Okay, well, I'd set a. Yeah, well, those. Pretend this is the code. You should draw a specific or a specific. Just a little rectangle that we're using as a. Well, an input tuner, believe it or not. You can drag it around and stuff to change the frequency of the signal. That's actually something I did recently. Okay, so that's pretty simple, right? But in this code, you should draw it. But like I said, it's real way far off to the left for some reason, you know, it's not in the right position, but you don't know why. So you go here. Let's say I go here and it's being drawn right here. It's hard to check the. Since. Since it's already been drawn or it's been moved around by the time I actually get to the web page. I can't just go and check it because it's like I said, it's being manipulated either by a script or in real time by the user or something like that. So. Well, not really by. There are no users while we're creating it. But you know, so I'd add. First I'd add a break point to some part of the code where I know that I know it has to go through to be drawn. And then I'd say, oh, okay, oh, I see the calcul. I have to do some calculations to transform the. Just its literal width in pixels on the screen or its distance from the left side of the screen in pixels. Oh, there's some weird. There's a mathematical error in translating it or in transferring that to its position in terms of frequency. Okay, yeah, I didn't see that. And you can only really see that when it goes through, go through that part of the code. You can see, you can either add a watch expression if you know, roughly if you know the variables that will be affected, or you can see the call stack here. When something actually happens. You can't actually see it right now, but you can see the functions that have been called to get here and then you can sort of go from there. In other words, you don't have to. I mean, you can let it do the work of knowing when it gets to the correct code and such, which is instead of having to time it so you click it like within 2 milliseconds of it starting or something like that, which I don't think anyone could, I guess I'm not certain, but I'm pretty sure I know I couldn't, so. And you. Okay, yeah, that's the sort of testing I would do while I'm creating it, while I'm coding. And then there's testing at the end. You can call this the testing stage. Once you have, once you think you're finished. Of course, if you test and find something wrong, you're really not finished. But once you've completed it in the sense that you've implemented all the features, at least you're at the end stage. You're sort of just going through and making sure everything is working correctly after the fact. Generally in that case. In that case, you're more looking for visible at that point. I've already probably done more as much proactive testing as I can, although there may still be some things I'd look for. It's at this point that I would, I would test other browsers and do cross browser testing, see if that, see if it works on Chrome, see if it works, you know, because we're, we're working with Firefox at first, see if it works on, you know, this version of Firefox, see if it works on the old version that another operating system that we're targeting uses, which is. I literally just did this a week ago on the project. We're doing so because we, we target an old operating, fairly old operating system that uses a really old version of Firefox and some of the features that we use weren't supported then. And I try to check and make sure that all the features I'm using or I'm putting in the code, all the language features really work correctly or they. In the documentation it says it's supported in the lowest version we're targeting lowest common denominator or whatever. But I mean, you never know. There's some things you don't catch, you just don't think of or you didn't even know about. So that's. That actually happened. I saw one of those things recently, what we're working on. In that case, I mainly. Sorry, no, you can go ahead.
Speaker B:
I'm curious, when you're doing that cross browser testing, are there any tools that you're using to help you support that process?
Speaker A:
Yep. No, I'm. I mean other obviously than the browser, other browsers themselves. I, I use something called VirtualBox. It's used to create a virtual machine that. Not that you can use to actually essentially have a really. A virtual system running the operating system that we're targeting to and then run the web browser on that. So we're getting what's really happening because you can test just an earlier version of the browser on the same operating system. But you never know. There could be some very bizarre obscure issue that happens only on certain operating systems. It's. You think that would be unlikely, but you never know. I mean, plus, you want to know if the, if the user's using a certain operating system, you want to know what it would, it would look like, it would feel like for them. You're essentially, you know, you're doing what they would do you to actually get to the app and such. And that's something you definitely want to do, you know, because there. Otherwise there's going to be a huge disconnect between what you think you're doing and what the client or what the customer actually gets. Anyway, we, like I said, we. There's something called VirtualBox you can use to set up a sort of virtual version of the operating system. Then I'd open the browser there and I'd actually. And I'd start the server up on my main operating system that I'm using and then I, you know, I connect on the virtual machine. Virtual operating system. I mean really we're in that. Other than that, I mean we're mainly just use. I'm mainly be using the developer tools on the browser for the. What do you call it? The. Yeah. If I was using Chrome, I'd be using their developer tools that they have. If it was an old version of Firefox, I was using that. In other words, what I saw. I was testing an old version of Firefox and I saw that one of the features. I was using it because it said this blah, blah, blah. This, you know, basically, yeah, it wasn't supported. So there is an error when you tried to use it. And I wouldn't have known that unless I tested it. And so I. Well, first I'd actually look in the documentation and make sure I was. Make sure I was correct about what it was talking about because the error message, I didn't know if it was entirely correct. I saw. Oh yeah, it is this feature. It's not supported. I didn't know that. Okay. And so then I just had to refactor my code and test and make sure it wasn't using that feature and then test it again. And I mean that. And really the only tools we've been that were being used throughout that process were the web developer tools in the respective browsers and the start the. Like I said, a virtual machine with the target operating system. And there's also Git if you want to, you know, where you go back and see what this version of what the code you had in, you know, maybe a week ago or something. Have you heard of git? Yeah. At all? Okay. Yeah. You. Okay, yeah. So you know, roughly. Yeah, if you want to know. Okay. Did it work this time? Was it working or did it seem to be working before? Okay. What was different then? Okay, yeah, if you want to know that. So you'd be using Git and such too. But that's what I mean when it's ad hoc. We aren't using like I. Mainly. You're mainly using the. Pretty relatively easy to. That's mainly what I'm doing to test.
Speaker B:
I'm curious if you've heard of tools like Cypress puppeteer or playwright.
Speaker A:
Cypress sounds familiar. I'm gonna be honest, I don't think I've heard of any of those, though. I'm not. Or well, I haven't. I'm not familiar with them specifically.
Speaker B:
Okay.
Speaker A:
They've heard the names.
Speaker B:
Okay. That is all I needed to know. And then looking at your workflow, is testing the last step for you or is there anything that happens after testing?
Speaker A:
Oh, okay. Fair. I mean, after that there's. And this can be happening concurrently. I guess I could be doing one test and then doing one other thing, then going back to testing. So this isn't strictly linear, but generally I'm doing, I'm adding, doing some last minute styling adjustments, making sure widgets are laid out correctly, sort of. We call it final, no styling adjustments. Also documenting the code, which I generally do the majority of that after I'm done. Because otherwise you're documenting something that you could have to completely rewrite once you figure out it doesn't work. There's pros and cons to doing that all at the end, but. But it depends on. There are probably people who would call that a fairly bad habit, but it is what it is. So not, you know, just to. So you know, right now it's a pretty small company. There aren't. There isn't a rigid sort of workflow already in place that makes. We aren't told how in detail how to get, how to do our work. We, I mean like we aren't told to go from this stage to this stage to this stage. This is what these are in essence what I have decided to do on my judgment, based on my own judgment. We aren't told to go from here to here to here. And we've considered. We have nearly complete freedom while we're working to do it the way we want as long I mean, obviously we have the features we're doing come up with something completely different. The objective is the same. The objective is set. But how you. The means are pretty. We have considerable freedom around that. So.
Speaker B:
And are you pretty happy with this workflow that you have?
Speaker A:
Am I happy with it? Yeah, right now, yeah, it's. It developed organically. I didn't plan it all in advance. Something, you know, it. And this is like I said, I'm fairly new to the company. I'm. And this is actually my first job out of college. I've been there six months. So I'm fairly new to working on in a professional setting as it is. I've done a good number of side projects, but you know, that's different. But I'm very good at what I do. I think I'm not like the specific what I'm good at, what I'm working with. It's just some of the higher level stuff. Some of the things you work in a professional setting I'm still rather new to, if that makes sense. So I am happy with the workflow. That being said, I'm. That I'm certainly open to modifications. There could be some parts of it that I need to change. It could be. If it. If it's a large enough project, it'll take a really long time. I could divide this up into. I probably just divide the work itself up, you know, specific milestones or whatever. I mean, I do that informally already, but I plan it out at advanced, you know, very discrete milestones I need to get to. And then I just. You'd essentially do well, except for the. There wouldn't really be a feature request here. It would be just objectives, you call it. You'd replace that with the objectives that you decided you needed to accomplish there for that particular milestone. But you just. I would probably do a miniature version of this. I do the same thing with that milestone. And at the very end, you just do a good. Not only. You do what we call integration testing. If they are in, you know, if I'm working on discrete entities that I've been integrating together, or it could be incremental, in which case there isn't. Isn't as relevant. But. So in other words, I know this will probably need to be. This is my workflow I've been using. It's not necessarily the workflow I know I'm probably going to need to use a different. Modify this one, or just different kinds of projects that I've encountered.
Speaker B:
And when you think about how you might modify it, I'm curious if testing would be one of the things that you might modify.
Speaker A:
Definitely. Oh, it would be. Yeah. No, it. It would be far more. For a large project, it would be far more rigorous. Probably. I'd probably. I use, like I said, I don't know a lot about this, a lot of very specific technologies, but I know there are some. You can write. You can write, you know, automated, you know, automated tests in there. You can have it generate random bits of, you know, sort of random scenarios and see if it performs correctly. Things like that. I. And I'd not only do that. I. Depending on what I'm doing, let's say again, I'd possibly even draw out a state graph, a large state graph. Make, you know, I have a formal set of conditions that I'm making that I can. When I say a formal set of conditions, you know, it means, you know, unambiguous formal set of. That I'd have. I'd plan out beforehand. I wouldn't just test as I. I would still test as I go, but I wouldn't just do that. I'd have. Like I said, I've automated Tests prepared using I probably some of the tools that you were talking about. I'd. And I'd. Instead of just think instead of just whatever crosses my mind I have a very specific set of things that I'm looking for pre prepared.
Speaker B:
What do you think stops you from doing that now?
Speaker A:
Nothing stops me from doing that now. I just don't feel that it. The projects have been small scale enough that I haven't felt like taking that extra step was necessary. In other words I can the conditions that I'm talking about I can generally just remember them. There aren't many they're like or either that or they'll just naturally come up as I'm working with it but for something truly large scale, not just adding sort of you know I would do some kind of formalized testing for like I said and the other. And of course the other reason like I said is we don't have that built in right now. It would. There would be a lot. It would take a lot of work to actually use to sort of integrate a testing framework in there somehow because or relatively maybe relative relatively large amount of work because there isn't one already in place. Because what we've done is pretty. What we've done, like I said is was it was never intended to be truly wasn't intended to be a big thing.
Speaker B:
Right.
Speaker A:
If it was already there maybe it would be. Maybe I'd resort to it more often but it's not so I'd have to put it in there myself.
Speaker B:
I know we're at the top of the hour. I have one more question for you if you have the time but if you have a hard stop.
Speaker A:
No, I'm fine. Go ahead.
Speaker B:
I'm curious where you might go to learn about different types of testing that people are running or tools.
Speaker A:
Well, probably the very, very first thing I do is I mean probably the very first thing I do literally is Google testing software whatever specific term I'm thinking of unit testing best unit testing framework for this particular thing. Maybe we're using react to that point. I don't know we might be using that in the near future. Best framework for that for testing for this. Blah blah blah. That being said, I've actually gone I've used MDN's documentation and tutorials extensively by this point which is so I might. One of the places I'd probably go to look for is their web technology section. It has. I know it will have something there. I don't look specifically for that lately but I most certain it would Maybe we'll find something. So that's the thing I haven't thought about. I haven't thought about doing that too much. I know we're going, I'm gonna have to at some point, but first I'd really have to figure out where to look. I don't know offhand exactly where to look, but I have a few ideas.
Speaker B:
Okay. And then one, one more follow up question to that. When do you think or what would be moment or milestone or indicator that it would be time to evolve the testing practice?
Speaker A:
Well, it's actually something just due to the specific circumstances of what we're developing, that's actually something we have to decide as a group. I can't, I can't unilaterally just decide to put, to do that probably so I would have to, in other words, I have to consult with the other members of my team about that. That's something we decide together. So. And that's the thing, honestly, we probably, I mean ideally we probably should have done already more than we have ideally. But it's not always that's ideally is ideally. It's. This is the real world. Things happen. We're actually, from what I understand, we're going to talk about that very soon, probably possibly next week.
Speaker B:
Oh, wow.
Speaker A:
So. And what led up to that decision to actually start seriously addressing this is. Oh, okay. We know our, we're beginning to outgrow the framework that we're using. We need to probably think about having just redoing a lot of things right now. You know, one of those things, you know, while we're redoing every. We're redoing everything anyway, things aren't set. We can add a testing framework to it, a formal testing framework because things are getting bigger. Right. And we haven't specifically talked about. We're going to redo a lot of things. We haven't specifically talked about a testing framework yet, but that's something we could very well, that would be the natural time to decide. We're going to add a testing framework, a formal testing framework or not. We could decide to put that off longer and I don't, I think, I don't think we should though. But. So I don't have, like I said, I don't have absolute control over it. We could decide, oh, we need to wait. We'll wait until we're done with this. But I would, if at all possible, I would not wait.
Speaker B:
Great. Well, that answers all of my questions. John, any last minute thoughts from questions from you?
Speaker A:
Nothing can think right now. No, the last one.
Speaker B:
Isaac, is there. Excuse me. Anything we haven't talked about yet that you think we should have talked about or anything you want to make sure that we learn about testing from you before we call it a rep?
Speaker A:
I don't think so. Unless you need clarification on something I've already said, I think I was. You know, I've talked about everything I can think of, so.
Speaker B:
No, I think everything you've said makes a lot of sense. And I really appreciate you taking the time to meet with us today and walk us through your process and how you test change as you guys outgrow your frameworks.
Speaker A:
Yeah, no problem. You know, I'm glad to do it. I volunteered after all, so. Well, I mean, you guys asked, but I said yes. That's technically volunteering, so. Yeah, no problem. Nice talking to you guys.
Speaker B:
You, too. Enjoy the rest of your Friday and have a great weekend.
Speaker A:
You, too.
Speaker B:
Thank you.
Speaker A:
Take care. Yeah, that goes to you, too. I was talking to both of you. Didn't know if that was apparent, but yeah. So both of you have a good weekend and all that. All right, well, have fun. Bye.