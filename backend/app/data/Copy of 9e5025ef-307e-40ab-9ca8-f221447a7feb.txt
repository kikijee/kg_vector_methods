Speaker A:
We are researchers with Pinpoint and we've been contracted out by Mozilla to help out with the MDN web DNA study. Looking specifically at kind of testing across browsers. As the last two years that's been brought up as a pretty big pain point. I'm seeing some head nods. I'm guessing this resonates.
Speaker B:
Yeah, yeah. I mean there's a lot of pain in I guess what we do, but yeah, that is definitely one of the things.
Speaker A:
Perfect. So it sounds like you're the exact person we need to talk to. So I'm liking this already. So part of today is actually going to be interactive and so what I'm going to do is copy and paste a link for you to open up in the chat window. And when you and I think it might be clickable but you might need to copy paste it. But when you open that up, if you can let me know.
Speaker B:
Yeah, I'm just going to open it up browser here. I'll open it up in Firefox.
Speaker A:
I don't know if I've used Firefox yet. So now I'm excited for this.
Speaker B:
I've been using Firefox for years.
Speaker A:
Is that kind of a preferred method for you personally?
Speaker B:
Yeah, I spent some time using Chrome, just one fire. There was a period where Firefox got really, really slow. But now that I can go back to Firefox, I have and I generally find it preferable. I tend to be. Maybe the fact that I'm on this call kind of highlights this but I think I'm a little bit of an outlier in a lot of ways. Like I tend to be relatively privacy focused. I don't like Google, I don't want to like stay inside of Google's ecosystem. I don't have Facebook, I don't have like, I don't go on dating sites. Like my privacy and well being are all very important to me I guess.
Speaker A:
That's awesome. I'm jealous that you don't have a Facebook, but just gotta let you know actually before we get into the project can I ask if you can elaborate any further on those points?
Speaker B:
On which ones specifically?
Speaker A:
I guess I guess just your browser preference. And does privacy relate to your work at all?
Speaker B:
I work writing software for orthodontic offices so there is like a HIPAA component there. But personally privacy is like a big driver for me in general. One thing that I have tried a couple times now and failed a couple times now at is setting up my own smart home stuff and unfortunately I have not gotten that server to where it's stable. But it's like an important enough thing to me that like I don't want, I don't want all my data out there for anybody to just grab. Even though it's kind of a futile feudal struggle in a lot of ways. I'm really, really happy to see Apple picking up privacy as like they, I guess, differentiator. And I do see a little bit of that from like the Mozilla team. I don't trust Apple though, and I trust the Mozilla team more. I don't know that I should. Like there's a lot of like they get a lot of grief and I think some of it is justified. I would let like I've donated to Mozilla in the past and I would like to support Firefox like financially, like make donations and stuff. I just honest, like I want to make sure that they can keep improving developer experience and stuff in there. I just don't know how it seems because I just. Because of their organizational structure and such.
Speaker A:
No, that's. That's awesome information. Thank you for that. Just, just super small follow up. Do you feel like what tools and everything you use does that change based on your want to keep everything private?
Speaker B:
Yeah, I think so. I am, I've never quite gotten into using Signal completely, but currently as an alternative to like more public social networks, I have a private Slack group that I've managed to get a lot of my friends into. I don't really trust Slack in the long term either though. So my intent is to actually set up our own Matrix server and actually have our own private space like our own alcove. It's a little bit. This is all the more reason I don't like Google. It's a little bit disturbing to me that Google recently pulled down Element, which is the Matrix chat client, because of content on the Matrix network. And I mean I get that there are probably bad actors in that network, just like there are bad actors online, but coming from Google, it's that trust thing. I can't help but think that there are probably also more nefarious reasons that Google might try and keep people from making their data less public.
Speaker A:
Awesome, thanks. Yeah, I'm learning a lot about privacy from you now, so thank you for that. As I go to change everything. Tell you what, on that link you opened up, you're going to see the testing workflow pop up on your screen. I'm going to share this so Allison can see as well. I was calling Alice. I don't Know where that came from? Let me go ahead and pull that up then. Alison, can you see the screen?
Speaker C:
I can, but I also just got an email that we've been waiting for today with the request to join a different meeting.
Speaker A:
Got it. Perfect. Sounds good.
Speaker C:
Okay if I drop from this one?
Speaker A:
Yes.
Speaker B:
Okay.
Speaker C:
And just text me if you need me.
Speaker A:
Okay, we'll do.
Speaker B:
All right.
Speaker C:
Thanks, John. It was nice to meet you, Amelia.
Speaker A:
Yeah.
Speaker B:
So I have interesting quirk, I guess, is that I actually have a plugin that enables dark mode across like the Internet. And it took you sharing your screen for me to realize I was like in dark mode over here and I had to like flip that off. That's something I. I like a lot. And I wish that Windows would tie it to location for Sunrise Sunset, but I doubt that they are going to do. And even if they do, I think a lot of apps wouldn't be prepared for that changing while the app is open.
Speaker A:
Yeah, but I'm actually with you on dark mode.
Speaker B:
Yeah.
Speaker A:
So the testing workflow is a project I'm going to have us work on real quick. What you should see is access to be able to add an event or a milestone. So the way I want you to walk me through this is to add, pretty much map out your workflow as you're going about a project, recognizing that projects might be different company to company or experience to experience. So I want you to map out one you feel pretty comfortable talking about. And as you're mapping out, just walk me through in order, they're going to pop up in the center of that screen as you type in and hit Enter. And you can click and drag it anywhere on the graph that you would like to.
Speaker B:
Okay. So I guess most projects, and this isn't necessarily the part that I'm fully engaging in, involves some element of like a discovery, which I might expand into other things here. Recently we had a project where we did a lot of sort of upfront planning as well in terms of the technical piece. So there may be an aspect of like UML diagrams system. Sorry.
Speaker A:
It's all good. Take. Take all the time and type out however you need. All of this is just really good data for me. So whatever you can give me, I appreciate. Oh, so if you click it, you can actually move it right, left, up, down, wherever you need to.
Speaker B:
Hovered it. I was like, I thought it might have. And I probably would have animated or something. I thought it might have like zoomed me somewhere and I didn't notice. So I mean, this is kind of like under this umbrella, generally there's like a project manager going through. We will do one piece. And this is not always, not always applicable is that we will do like a. Some voice of the customer exercises to try and understand like, what that product is going to need to have to become viable. And if sometimes we're rebuilding an existing product. So sometimes we want to know, like, is this, like, where is this falling down for you right now and what can we do to replace that? You might have in here as well? Like, these are experience sort of interviews with people. This is kind of happening right about the same time as we're doing our sort of planning on the back end side of things. Well, not back inside, but like from a development perspective while we're doing that, hopefully, like, hopefully the design team has capacity to be putting together like prototypes and they're using. Right now, they're using Sketch. There's been a lot of flux with us in terms of like, design stuff specifically. We just. What it comes down to us constantly is capacity. Like we have this legacy Sketch stuff we'd like to get to Figma, but we just don't have the capacity to take all our Sketch stuff and get migrated over to Figma. So like, we just keep doing things in Sketch. So like, I'll say like Sketch here for like wireframes, but there have been instances where they will do sort of like interactive prototypes with that. So I'll kind of add that here. And those may or may not be done through Sketch. There's all this stuff before you even start developing, this is kind of going on at the same time. We'll have a. We might have like an Inception sort of meeting and there might even be several of these. But I guess this is all kind of discovery here. Kick off. These might be right around the same point in time. This is probably before we get into too much wireframing. Yeah. Okay. So inception kickoff, meaning there tends to. We tend to work pretty closely with our product team. So like, as they come up with designs, like Ideal World, what they want to be doing is having those designs and stuff like six weeks ahead of like when we're going to be doing this stuff. So ideally this stuff is all done and we maybe are starting into some sort of like kickoff with a little bit of an idea of what we're doing. But realistically, this kind of like clumps together a little bit more than that. And when we do it, we tend to maybe struggle a little bit through what the product actually is going to be and try and I Think the developers on our team are very good at helping the product people and design people with questions about like, okay, but like, really though, how is this going to work? And personally, I've been doing this for a long enough time. I've seen a lot of interfaces, I've seen a lot of patterns in terms of how you might use software. For example, like, oh, how do you use an email client, how do you use this and this and this? And it's like, okay, but like, if we're doing something with text messages and emails, like text messages don't have a subject, but emails do have a subject. So how do you account for that in this whole product? Or like this check, this checkout is going to be for people in these countries. So how are, how are you going to deal with the internationalization aspect of this or things like that? A little bit difficult to come up with, like example, like fake example stuff off the top of my head. But those are, those are the general. That's the gist. So, okay, we got through. These are interviews. Things like this we actually have in terms of like the browsers and stuff we're going to support. That's like just like an established sort of process piece that lives. And it took a while to get to understanding what we were going to support. And I ended up writing a document up for that eventually because there were constantly all these questions about like, do we support this or do we not support this, etc. Etc. So in that guidance document, it's kind of broken up into tiers with the evergreen browsers being the highest on those tiers generally. And then really they're kind of letter tiers. It's not a new concept. I had seen something similar that Yahoo was doing back in like the web 2.0 days, I think, and kind of like adopted like took some nugget of that like from way in the back of my mind and like rehashed it to work in the world that we have today. So it. And it like, I thought like, oh, there's this tears idea that Yahoo has like, or had like, I'll just kind of apply that. And then like found that it didn't really apply nicely, at least not to our situation, because it's like, what is IE11? That's a browser none of us want to support, but it's still one that we have to support. And so it's not like, is that that's not really an E tier browser, but maybe it's a B tier browser and we have these sort of Levels of best effort support and levels of where the user will actually get prompted. End user prompt. So we have sort of. We don't put it in every application, but on our login page we will show like notification that certain browsers have been deprecated and that's for ones that fall into particular tiers or categories in that sort of browser guidance that we do. So that's kind of just a larger process piece. And there are other sort of larger guiding processes, process pieces as well that probably come into play here, but I'll come up with those later if they're necessary. I guess things like branching strategies and stuff like that that we try to define as an organization or even as a team, but that don't really aren't necessarily things worth thinking about or doing too much with. At some point I'll set up a GitHub project and I call it out because like GitHub doesn't actually give you the ability to like define properties of a project across an entire organization. Like, oh, whenever I create a project, it should have the web hooks, the CI and it should have these teams on it, et cetera, et cetera. So like there is this manual effort of having to go in and set up this GitHub project and then currently we fork off. This is. So I am working a lot. I'm very scattered. I work across a lot of different things. My team tends to be a little bit more front end centric. Although we also do these NET projects for the front end project. We will fork off an existing spa we don't generally have. Like we have and that's angular in our case. We don't generally have a lot of time to set up a new project and pull in all the libraries and get everything just right. Most of the time we're forking off some existing project we have and just deleting a bunch of the pages. And I wish I could say that with these spas that we just had one giant spa and a model repository and things like that, but we don't. We just have a bunch of little spas that kind of serve as micro applications. It was supposed to be larger and we started hitting a bunch of memory limits when trying to build angular applications on the CI cd. So it was like, all right, whatever. Just like get another one set up and put a different domain to that. So we get the spa sort of set up and then I will. This is in terms of like the. Just the normal setup. I'll specifically go through and kind of like lay out the Component and I'm the senior developer on the team, so that's kind of why this is. And the longest in terms of front end. So those two things feed into like, why it's generally me setting this up, the component and state. How do I put it a little bit like brush. Kind of like broad strokes, I guess. And that's. That's just to get us to a point where like the others can start contributing to things once that's set up. Another thing. Let me see. So that gets set up, then team members will generally start contributing and we will go through. I feel like I need to. I can't zoom this out or move everything.
Speaker A:
You can go behind or below the line if that helps. So you follow that room as well.
Speaker B:
Okay, that's good to know. So let me do this. Customer. Just like all this. Sort of like sketch this. This. Yeah. There is like discovery phase and pretty here. Okay. All right. So bail. Start contributing. And I guess I want to take a second and step back and just say, like, so what are the parts that you're most interested in? I just want to make sure I touch on that.
Speaker A:
So you have been. Because I'll be digging deeper here in a minute. I'm literally just looking right now for your typical workflow. Like what it looks like from as early as you want to start it to as late as you want to call the end. Yeah.
Speaker B:
Because one thing I know I haven't touched on here is like the project management sort of piece.
Speaker A:
Give the project management. I'm more curious about you as a web developer. Like, what. What do you go through?
Speaker B:
Yeah. Because we will be going through and doing our sprints and we don't really. We're trying to get into the habit of demoing to our product people so that they get an understanding of things. But generally there is a lot of back and forth going on between us and product and design to like a lot of times as we're building this out where they're making revisions to our stuff. So. And there's some degree of like, guesswork on my part because I'll get a designer. Something that's ambiguous and just have to. It's not as quite as bad as it used to be where I would need to just guess at what the business logic was supposed to do. But. And I'm not saying where I am now, but years and years ago now it's a little bit more subtle. Like somebody will drop a drop down into or drop like an input into a box and I'll be like, well, how is this input actually supposed to behave? Because this field is a date, but you just drop the normal input in here. Clearly you're probably wanting a date input here. So there's like a little bit of like, guesswork on my part about, like, trying to keep the experience optimal. We have linting and we have.
Speaker A:
I.
Speaker B:
Guess linking is probably in some ways the more powerful piece because the linting is supposed to address for us certain concerns like accessibility. I also have to kind of like, actively think about accessibility. Again, we kind of have like, some components. We have like, common components and stuff we've written out in the past, but they don't really. We haven't really had the time or capacity to like, build those out to the degree we want. So there's. We definitely get in here and there's stuff that we haven't built before, even relatively, like, if you're out on the Internet, normal stuff that you've interacted with that we're having to build out here and think about, like, is this hopefully accessible to whatever degree it can be. And I, I wish I had here like a license to JAWS or something along those lines to where I could actively, like, test the accessibility stuff myself. I am dyslexic, so I make really extensive use of Firefox reader mode. And it's very frustrating to me, like, when I get to pages like the AWS documentation where I like the reader mode in Firefox just doesn't work there because I have to go through so much documentation all the time. And it really helps me tremendously. I wish that I had tools that I could use to better vet the accessibility aspect of things. Sorry, you just looked like you were going to say something.
Speaker A:
I had a question by wanting you to finish, so I apologize. That's on me. I tend to get excited sometimes, so I was kind of curious and go with however comfortable you are with answering. What would a tool suite look like for you that you would have as like an ideal to help you with accessibility?
Speaker B:
So one piece that we've used in the past, and this is why this kind of spun out of the linting piece, is that there are linting tools, at least in the react ecosystem ally that go through and try and guide your hand in terms of telling you that, hey, you didn't put this title, this, this. God, I can't even think of it off the top of my head, like an alt tag on an image or things like that that are clearly things that you like. If you look through the accessibility guidelines that get put out. Some of that stuff is vague, but some of it is very addressable and like a machine can detect that something is wrong and tell you that something is wrong. And that's what we use our linting for. Unfortunately like the linting situation with Angular has been super up in the air and I'm not even sure that we're getting the sort of like accessibility guidance of a linking there that we should be getting. I think being able to like, like I can't put my, my head into how do I step back a second. As a programmer I often have to pretend to be a computer and understand what the computer is going to do. I don't feel that I have any level of understanding around what a screen reader is going to do exactly. And I don't. And the licensing around them is just so expensive that I don't do it. There is an open source one, my cat's feeder. There is an open source one that I have played with on and off. But I, I find it really challenging to get into using it. And that's called I think nvdm. I, I have kind of dropped using it a little bit more since moving into using Firefox Reader as much. But even then I don't like, I don't even know if I can trust the feedback that I'm getting from NVDM is feedback that is the same thing that somebody in like Jaws is going to be experiencing. So there's just a lot of like ambiguity there. And yeah, that isn't helped by the ambiguity in the actual accessibility guidelines. It would be like. And that's not like a knock against them. There's just some stuff that you need to kind of like have a human judge. But I don't think a lot of the developers that I've worked with have a great grasp on like what it is like what those judgment calls that they're supposed to be making are and anywhere that they can be more. It's like a, it's like a repl for code anywhere that they can more quickly get feedback that like what they're doing is like off of where they should be or they should be going through some steps the better. And there are other tools out there that do accessibility checking but I don't know how best to work those in to our sort of tool chain and CI CD flow. So like anything right in the browser is very helpful. I think.
Speaker A:
That'S awesome information. Thanks for that. Before I move us to the next phase, do you have anything else you wanted to add to the graph.
Speaker B:
Yeah. So I'll just kind of file through a couple real quick. The rcicd that's like checking our stuff as we do pull requests and in there we're doing our unit testing which unfortunately we do not write enough unit tests because we don't. I feel that like in the Angular ecosystem we have no idea how to do it in a lot of ways. Like they've got this whole reactive functional programming paradigm and they've got this marbles test tool, but it's very outside of how you would normally write or I feel it is and nobody else has really picked it up. So I think that it's a bit out of the ordinary for us. Will deploy things to a test environment. Our environment situation is an absolute mess because we don't have enough institutional knowledge about doing DevOps or doing distributed systems or any of that stuff. We can't reproducibly build our, our soft, like our actual infrastructure the way we should. So like we don't have like, we just have these like, these infrastructure resources that random people set up at random points in time and it's not entirely clear what this is used for or what that's used for. And we're slowly working through that. But I don't actually think we have like the insight that we need to have into that. And then the other piece that I don't, I'm not convinced anybody understands how to do is the integration testing piece. I don't even know what to put there, like a bunch of question marks, I guess, like that's what we want to be doing. We want to be doing integration testing here but. And like we know we want to be doing integration testing here, but at my current company and at my last company, nobody really seemed to have any idea how to do integration testing. And that problem is like widely accentuated by the fact that we can't reproducibly set up environments to do that integration testing inside of. And then we'll deploy something to produce. And we used to have like, for our larger, more legacy software, we used to have like a big overnight, several hour long process to do this. Now we're at least deploying it once a week. Generally something gets broken. This is something that we have had issues with for like the past couple weeks now, to the point where we've had to have meetings about specifically like how do we stop deploying broken code. And like hypothetically I know the answer are things like canary branches and blueprint deployments, but we just don't have the time or Capacity to get the infrastructure like the environment set up to be able to do a blue green deployment and have that green environment set up and have like. And rework our deployment processes to like involve canary branches and stuff. Honestly, most of the people that I'm working with, I don't think they. And this is not like a knock against them or anything but like they're not DevOps people that they don't have like familiarity with the concepts of like blue green deployments or canary branches or things like that. Everybody just kind of, I don't know, it's very organic and that misses a lot of those sort of more advanced approach like those. They're just not naive approaches and so people don't natively just think them up. So we'll probably roll back. We're trying to, we're trying to communicate the change log better to our. We have a call center of people. We're trying to communicate it better to them now as of like this week because of all of these problems and the hope that like if maybe if they know that something that we're doing this change, like they'll be able to catch something and we'll be able to revert the thing faster rather than our customers. But like the answers to that are really, like I said, blue green deployments and like canary branches and things like that. And then like our product. So say we've wrapped up that project. It'll not get updated. Like we'll push to try and get it updated, but it's again that capacity thing, things don't get updated in real time. It's not like, oh, there's a new version of Angular, let's update this. It's more like six months, eight months later, two years later, it's like, okay, it's time to really go back and try and update these things. So even if you have tools for security where it's like GitHub has like dependency bot and things like that, where it can flag that you have out of or insecure dependencies in your project. It. It's not helpful if we can't figure out the capacity to actually go through and make those changes and proof those changes and prove that those changes aren't going to break something else.
Speaker A:
That is a lot of really good information. So thank you. So the next thing I'm going to go ahead and do is to add some guides to this and we're going to have neutral being anything that maybe you do that doesn't, it's just kind of you do it kind of Deal. Anything that you feel is a little bit more frustrating, I'm going to have you move up towards the top and anything that you're like, man, I'm not frustrated, actually, enjoy doing. I'm going to have you move down towards the not frustrating and I'm also going to jump us and I'm going to have you start after your discovery phase with the UML diagrams and I'm going to have us work on that half of the graph.
Speaker B:
Okay. So it's so hard because sometimes it is and sometimes not. Like, we don't do UML diagrams super often and sometimes it's really rewarding to do that system architecture stuff, but other times, like if the meetings start dragging out too long and people start forgetting what we were talking about in the last meeting and things like that, it can get really, like, I can get so burnt out on it so quickly. So I'm gonna, like, keep it a little bit frustrating, I guess. UX interviews, I don't generally take part in those, so I'm gonna put them a little bit more towards this discovery piece.
Speaker A:
Sounds perfect.
Speaker B:
GitHub project setup is a little frustrating. Forking off the existing SPA stuff, it's a little frustrating. It's not the heart, it's not the hardest thing in the world, but generally that's the opportunity that I'll take to try and get us up to the most recent version of the framework and such. And with Angular, trying to update it is a massive pain. So like, sometimes, like, I'm going through and trying to get their replace tslint with eslint and everything's become substantially more slow. This I actually don't mind doing at all. I like the actual act of like coding out and figuring out how the application structure is going to be like that. That's fine. That's the work that I enjoy doing and I think the team members helping with this stuff, there's an element of mentoring there sometimes that I also enjoy product revisions. I think that we basically expect that this is going to happen to some degree. So that's kind of neutral and it's just especially at the pace we're working, like that stuff is going to come and it kind of is what it is. I actually don't mind the UI guesswork piece. I like working on UI stuff. I like. Recently I was given an ambiguous UI and I worked it up so that it was this really robust little search ui and when they got it back, they were like, oh, my God, this is amazing. This is the best way to do this that we've had inside this entire piece of software. And so like there's a little bit of like when, when you get it really right, there's like that enjoyment that you see people react with. That's really rewarding. This is. This has always been a bit frustrating, this accessibility piece. And it's just frustrating for so many reasons including trying to get people to actually think about it and do it. The linting piece is. I'm going to put it on the frustrating side of things. It's not the most frustrating piece. Unit testing is I would say very frustrating for us. Like we do not have enough guidance from Angular in terms of like in terms of like what a well unit tested application looks like and we don't understand how to write those tests and trying to get people writing the tests. Like you can try and target like made up coverage metrics and stuff but that doesn't quite tell the whole story. So and then like actually getting the unit tests running and passing like one of a lot of times we'll have one or two of them fail in the CI CD environment but we can't get it to fail locally. That's really incredibly frustrating. I'm going to move this up a little bit higher. The more I talk about it. Deploying to the test environments is making more sense now. It is. I normally have to build out the infrastructure for those test environments and stuff. I have managed to automate that for myself. But in the broader organization there's a lot of that that's a mess.
Speaker A:
And Amelia, I actually do want to dive into that just a little bit. What suite of tools do you use? Or do you have a suite of tools that do you use when you're developing those tests and utilizing them?
Speaker B:
So the unit tests or the test environment stuff?
Speaker A:
Test environment, please.
Speaker B:
Yeah. So for our test environments I've used Terraform to write up some stuff that will build out the actual environments. It is not quite abstract enough. So like we can't just have n number of ephemeral sort of cloud environments. We're sort of like locked into what we have. And some of the older ones are really inconsistent and require some manual effort to set up a place for the new application in that environment. Basically like set up an S3 bucket where we're going to upload the spa things like that. I automated a good amount of it for the front end stuff or the back end stuff. It's not there like trying to figure out where to capture application configuration. So like if an application needs in one environment needs to know that, like if I link to this other application in our test environment, but here's the link for it in our PROD environment. Trying to manage that configuration across environments is massively, massively painful. I've been using AWS parameter store to try and capture some of that information. It's also incredibly painful because on the front end we have to know that information when we build the spa. So when the Angular compiler runs, it needs that information and it's going to hard code it into the page and that's just where it's going to live eternally. In the back end they can, like, when you deploy a server that the application is going to live on, it can know about all that stuff, stuff and inject it into the application and you can just write your application to be an abstract blob. But here on the front end, we have to bake all that information into the application. And if you can't take that same thing and run it in your dev environment and in your PROD environment because it's got different information baked into each, that's incredibly frustrating. Trying to just coordinate all that information that needs to go into like the final application. Again, we're getting there, but like, and there are approaches to handle it, but it's just like comparatively small team, like we just don't have the time like to like take away from the feature work and put into like reworking this and the paradigms that Angular adopts for some of that stuff don't help.
Speaker A:
Do you feel though, is it catching all the problems when you're running these tests, do you catch the problems with your application?
Speaker B:
No, this is more. We're deploying it out to these test environments so that our product people can see it. And do I do. What am I thinking, like user acceptance testing almost on it. That's probably more the CI CD piece, which when we do, when we go through and we commit the cicd, runs it through all the unit tests, runs it through all the linting and it may do some additional stuff to kind of sanity check it. I don't have all the stuff in there that I'd like to see. I would like to get like visual regression tests into our like CICD flow. And if we're not like writing unit tests, like the CICD piece is kind of like pointless. Like, not totally pointless. Like it does the linting and it does for the tests that are there, it, it gets them. But right now we're still in this state where every time we have to define what it's going to do in the CI cd. We are writing these pipeline files around it. And honestly, by writing, I mean a lot of copying and pasting, but it isn't, I don't know, it. It doesn't really get us enough. It's the. It takes like, all these bad things going on just kind of meet up here and like, the fact that we don't have the environments to test in, the fact that, like, we don't have time to put the visual regression testing into place, the fact that we don't know how to write our unit tests, like, the CI CD is where, like all of that bad mojo kind of like comes to a head. And so, like, yeah, it does go through and automatically build our product. And yeah, it does kind of like give us some insight into what's going on, but it's, it's pretty far off of where it can be if, like, these other bad things weren't going on.
Speaker A:
That's, that's fair and just with respect to the time, I'm going to be just a little bit more pointed, but I still want to hear what you have to say. Yeah. Where would you move integration testing to? Okay, perfect. That's what I was thinking.
Speaker B:
None of us know what to do for this. Like, we don't know how to, like, work it into our pipelines, our CI CD pipelines. We don't know how to do it. Like, what do we do with databases? That's a huge question around integration testing for us. And everywhere it feels like it's just like, how do you do integration testing? Everything needs to be reset almost. But we can't even deploy our applications repeatedly. How do we do this? And if I look through some books, like the Google SRE book, it's like, oh, yeah, you just like, have it go off to like some integration, like, invite you just boot up an integration environment and run your integration tests there. And it's like super vague. And I don't. None of us quite seem to know how to work it into our, like, GitHub branching process or how to work it into our CI CD or like, what the right practices are for that or any of that stuff.
Speaker A:
Correct. That's actually great information. And so I'm going to kind of rapid fire these next few questions to you. And I just want to know if you've heard of the term before or the product, and if you haven't, that's perfectly fine. And if you have just a quick opinion on it. Have you ever heard of Selenium?
Speaker B:
Sorry, I've inverted this whole thing. I'm realizing now, but this is super frustrating and it's up here. And unit testing is frustrating. Oh, my God. I've inverted some of these.
Speaker A:
Oh, you're good. You're good. I'm gonna. I'm gonna just move us a little bit and we can come back to that later if we need to. Have you heard of Selenium or Cypress before?
Speaker B:
We're currently using Selenium as part of our automated testing in the cicd. We. I think that there's some opportunity to use it there, but we're struggling to figure out, like, again, like, because you have to reset all this stuff before you can start writing the Selenium test stuff. So we do use it as a way to do a little bit of regression testing. And Selenium is also finicky to be polite, but it is better than nothing. And we also use Selenium in combination at times with a tool called Browser Stack so that we can run those tests against different machines. But certain browsers, like Safari can be way, way more finicky in Selenium than other browsers like Firefox and then Cypress, we have not adopted. I'm still. Still very much on the fence about it. Angular is supposed to be a framework that comes with a lot of stuff built in and in place. Because Cypress wasn't a thing, Angular is kind of maintaining its own tool called Protractor. We haven't really used Protractor at all. And that kind of goes hand in hand with this, like, not understanding how to write those tests and how to get them to run quickly.
Speaker A:
That's. That's awesome info. And I know we only have four minutes left, and I still have a few questions for you. Are you okay if we go over time just a smidge?
Speaker B:
Yeah, I'm totally good. I feel bad about you all, but I think you're at least one time zone, so maybe it's not.
Speaker A:
Yeah, we're pretty good. So we've gone over a little bit. You've told me a little bit more about Cross browser earlier on. I'm just curious if you've heard of Puppeteer before.
Speaker B:
Yeah, I have heard of Puppeteer. Puppeteer is. That's not still. That doesn't still exist. Right. I feel like that project because. Or I feel like they deprecated Puppeteer because. Because it used to work with Google. It used to do. Or maybe I'm thinking of like the headless browser extension for Chrome that they were doing because Chrome, because Chromium eventually adopted the ability to run in a headless mode. And so like people are now largely using just Chrome Headless as opposed to like the dedicated headless Puppeteer solution.
Speaker A:
That's. That's a great answer. Thank you for that. We've talked a little bit about accessibility testing as well. I was curious if you've ever heard of anything like Lighthouse.
Speaker B:
Yeah, I, I really wish I could get Lighthouse into our CI CD project, but again, it's just like a time and capacity piece. We're using Jenkins. It's really ridiculous to me in general, I guess. Like there doesn't seem to be a lot. Like a lot of this stuff is stuff everybody's doing and so it's. It's ridiculous to me. I guess I can't find because Jenkins is also open source, but I can't find a great repository of just pipelines that like everybody is trying to shoot for the same thing. Like why can't I just find like a repository of common deployment pattern pipelines that like deal with a lot of this stuff and have like, oh, yep, Lighthouse is baked in and it runs here and this one's here. Because that feels like it should be. I know, like I. Maybe nobody has the time or capacity.
Speaker A:
No, you're not alone. I also was curious. So I don't think we've talked quite a lot about visual testing or anything along those lines. I'm just curious, have you heard of visual testing and do you perform it?
Speaker B:
We don't. I'm trying to sell people on it right now as part of our quality issues because we don't really have the capacity to do like proper regression testing of our system anymore. I think that visual perception. Excuse me. So I originally I remember reading the original article about it when they were referring to it as perceptual diff testing. So I might get the language a little bit messed up here, but the visual, the visual regression testing piece is something that feels like potentially really good low hanging fruit for us. We already have Selenium. There's a little bit of questioning in my mind about like tooling for it. Like that's always been kind of the question. Like I know that there's kind of a few tools that can do it. I feel like maybe even Puppeteer could do it back in the day or had a fund or puppeteer where you could do it. I don't exactly know how to set it up off the top of my head. And I'm the one that's writing parts of our build pipelines. So like if I can't get the time to research it, then it kind of just doesn't get set up. Although I think that it's a really good opportunity and it's kind of goes back to like I wish I saw. I wish I just had an ex, like had this like saw how other people were doing it in their like Jenkins pipelines and could leverage it for our Net stuff, for our component stuff, our design system that we're building. I'm trying to get us moved over to Jest and I have on a few projects and I forget the name of it, but Jest also has a visual regression piece to it that you can leverage. And so my hope is that I will get for the front end at least a lot of our, or rather for our front end spas, get a lot of our shared components into a library with Storybook with Jest. Every time that you update stuff that goes through a CI CD for like the front end pieces and leverages Jest visual regression tools.
Speaker A:
Awesome. So I have two more questions for you that I'm going to actually quickly ask Allison if she has any follow up questions before I get to them.
Speaker C:
Only one. And you've mentioned accessibility testing and accessibility standards. I'm wondering if there's any like which standards you reference and why.
Speaker B:
Oh God, the wag. Right. Web accessibility guidelines. And then so those are the ones that I feel like there's some solid stuff in there in terms like solid as in like machine readable I guess. And there's some like fluffier stuff as in like human needs to discern this thing and understand it. Those are the ones that come to mind just because they've been around forever. Like I think that like is it Lighthouse? I think that it's Lighthouse that also has some degree of accessibility scoring in there as well. I think that like there are tools out there that help with this stuff that we just haven't had the capacity to be able to start leveraging. But like it would great like if it was like more immediate in the browser too, which I guess Lighthouse helps with in Chrome a little bit.
Speaker C:
Thank you.
Speaker A:
I actually do have a question you had brought up that you did a whole browser guidelines for your company when it comes to doing the testing and the creation and everything within that. Would you be willing to share that document with us?
Speaker B:
I might be able to. It's sort of like a spreadsheet that kind of oh, we're going to like here's browsers we consider A and B. And here's like the what we'll try and do and what we'll try and support and like, things like that. I'll have to like ask if it's okay with.
Speaker A:
So I'll just type in our emails on the chat. I was about to the wrong email. That's a good thing. I do that. And then my follow up question is for the last couple minutes, is there anything you'd want Mozilla to know about testing that we haven't covered or just about web development that we haven't gotten to cover?
Speaker B:
I'm worried about them, I guess just I know that they had like a round of layoffs and such and that they're kind of like pushing the developer documentation stuff a little bit more onto the community than having the dedicated team internally for it. So like, I guess I worry about them. I want them to be there because they are like they are. I'm sure that they have motivations that aren't always perfect, but they are one of the actors that seem to actually have developer interests in mind, at least in my worldview. Whereas a lot of the other people who have a seat at the table don't necessarily. They sort of have a profit motive and things like that. I think that the work that they put out there to help the dev community has been really good so far. I'm trying to not get my expectations too high, but I really do want to see the Mozilla dev tools out do the Chrome dev tools so that I can keep getting developers moved over to the Mozilla solution. So like anything that comes out of this that that can be like turned into something useful for dev tools that I can use to like pitch dev tools and pitch Firefox to like fellow developers and like get hopefully people moving back towards Firefox. I would be really happy to see.
Speaker A:
I guess, yeah, I guess. Is there like a very like if you needed one thing to pitch, what would that one thing be? If you have off the top of your head.
Speaker B:
I think it, it's hard because like I said, a lot of the tools exist already.
Speaker A:
Okay.
Speaker B:
So like the exhale, the access, there are accessibility tools that exist. I kind of like the idea of like that common deployment patterns and pipelines piece for like Jenkins or other CI cds where it's like, hey, these tools exist in the ecosystem to that you can use, you can leverage these existing things that help with your testing. But we know you don't have the capacity to necessarily get all this set up from smaller teams, don't necessarily have all the capacity to get this set up. Like here's some guidance on how you can get that set up or some stuff that you can sort of drag and drop into your process to like or like what you should be shooting for in terms of your process. Just documentation on how to do all this testing.
Speaker A:
That's awesome. Anything. Anything further for us?
Speaker B:
I think that's all I have.
Speaker A:
Okay. Allison, do you have any last questions?
Speaker C:
I don't. This has been really helpful. Thanks so much for sharing your perspectives with us.
Speaker B:
Yeah.
Speaker A:
Yeah. Thank you again, Amelia.
Speaker B:
Sorry, before I Before I lose this chat, let me just copy email over I almost forgot to do that here.
Speaker A:
Yeah.
Speaker B:
I'm glad to help End if you need again for any reason, just feel free to reach out.
Speaker A:
All right. We might require that we see the cat next time but she's.
Speaker B:
She won't touch her, so I don't I guarantees.
Speaker A:
Okay. Sounds good.
Speaker B:
Yeah. Thank you all.
Speaker A:
Thank you so much. You go ahead.